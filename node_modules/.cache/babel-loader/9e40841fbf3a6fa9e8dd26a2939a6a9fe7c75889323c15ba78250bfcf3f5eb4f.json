{"ast":null,"code":"// src/utils/currencyUtils.js\n\nexport const getCurrencySymbol = currencyCode => {\n  const currencySymbols = {\n    USD: '$',\n    EUR: '€',\n    GBP: '£',\n    INR: '₹',\n    JPY: '¥',\n    CAD: 'C$'\n    // Add more currency symbols as needed\n  };\n  return currencySymbols[currencyCode] || currencyCode;\n};\nexport const fetchCurrencyConversion = async (baseCurrency, targetCurrency) => {\n  try {\n    const response = await fetch(`https://api.exchangerate-api.com/v4/latest/${baseCurrency}`);\n    const data = await response.json();\n    const exchangeRate = data.rates[targetCurrency];\n    return exchangeRate;\n  } catch (error) {\n    console.error('Error fetching currency conversion:', error);\n    return 1;\n  }\n};\nexport const getUserCurrency = async () => {\n  if (navigator.geolocation) {\n    return new Promise((resolve, reject) => {\n      navigator.geolocation.getCurrentPosition(async position => {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n\n        // Fetch user's country and currency\n        try {\n          const locationResponse = await fetch(`https://nominatim.openstreetmap.org/reverse?format=jsonv2&lat=${latitude}&lon=${longitude}`);\n          const locationData = await locationResponse.json();\n          const country = locationData.address.country || 'Unknown Country';\n          const currencyMappings = {\n            \"United States\": \"USD\",\n            \"India\": \"INR\",\n            \"Canada\": \"CAD\",\n            \"Japan\": \"JPY\"\n            // Add more country to currency mappings as needed\n          };\n          const userCurrency = currencyMappings[country] || 'USD';\n          resolve(userCurrency);\n        } catch (error) {\n          console.error('Error fetching location:', error);\n          resolve('USD'); // Default to USD on error\n        }\n      }, error => {\n        console.error(error);\n        resolve('USD'); // Default to USD on error\n      });\n    });\n  } else {\n    return 'USD'; // Default to USD if geolocation is not available\n  }\n};","map":{"version":3,"names":["getCurrencySymbol","currencyCode","currencySymbols","USD","EUR","GBP","INR","JPY","CAD","fetchCurrencyConversion","baseCurrency","targetCurrency","response","fetch","data","json","exchangeRate","rates","error","console","getUserCurrency","navigator","geolocation","Promise","resolve","reject","getCurrentPosition","position","latitude","longitude","coords","locationResponse","locationData","country","address","currencyMappings","userCurrency"],"sources":["/Users/dishapanchal/Documents/GitHub/Rentmasev1/src/utils/currency.js"],"sourcesContent":["// src/utils/currencyUtils.js\n\nexport const getCurrencySymbol = (currencyCode) => {\n  const currencySymbols = {\n    USD: '$',\n    EUR: '€',\n    GBP: '£',\n    INR: '₹',\n    JPY: '¥',\n    CAD: 'C$',\n    // Add more currency symbols as needed\n  };\n  return currencySymbols[currencyCode] || currencyCode;\n};\n\nexport const fetchCurrencyConversion = async (baseCurrency, targetCurrency) => {\n  try {\n    const response = await fetch(`https://api.exchangerate-api.com/v4/latest/${baseCurrency}`);\n    const data = await response.json();\n    const exchangeRate = data.rates[targetCurrency];\n    return exchangeRate;\n  } catch (error) {\n    console.error('Error fetching currency conversion:', error);\n    return 1;\n  }\n};\n\nexport const getUserCurrency = async () => {\n  if (navigator.geolocation) {\n    return new Promise((resolve, reject) => {\n      navigator.geolocation.getCurrentPosition(\n        async (position) => {\n          const { latitude, longitude } = position.coords;\n\n          // Fetch user's country and currency\n          try {\n            const locationResponse = await fetch(`https://nominatim.openstreetmap.org/reverse?format=jsonv2&lat=${latitude}&lon=${longitude}`);\n            const locationData = await locationResponse.json();\n            const country = locationData.address.country || 'Unknown Country';\n            const currencyMappings = {\n              \"United States\": \"USD\",\n              \"India\": \"INR\",\n              \"Canada\": \"CAD\",\n              \"Japan\": \"JPY\",\n              // Add more country to currency mappings as needed\n            };\n\n            const userCurrency = currencyMappings[country] || 'USD';\n            resolve(userCurrency);\n          } catch (error) {\n            console.error('Error fetching location:', error);\n            resolve('USD'); // Default to USD on error\n          }\n        },\n        (error) => {\n          console.error(error);\n          resolve('USD'); // Default to USD on error\n        }\n      );\n    });\n  } else {\n    return 'USD'; // Default to USD if geolocation is not available\n  }\n};\n"],"mappings":"AAAA;;AAEA,OAAO,MAAMA,iBAAiB,GAAIC,YAAY,IAAK;EACjD,MAAMC,eAAe,GAAG;IACtBC,GAAG,EAAE,GAAG;IACRC,GAAG,EAAE,GAAG;IACRC,GAAG,EAAE,GAAG;IACRC,GAAG,EAAE,GAAG;IACRC,GAAG,EAAE,GAAG;IACRC,GAAG,EAAE;IACL;EACF,CAAC;EACD,OAAON,eAAe,CAACD,YAAY,CAAC,IAAIA,YAAY;AACtD,CAAC;AAED,OAAO,MAAMQ,uBAAuB,GAAG,MAAAA,CAAOC,YAAY,EAAEC,cAAc,KAAK;EAC7E,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8CAA8CH,YAAY,EAAE,CAAC;IAC1F,MAAMI,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IAClC,MAAMC,YAAY,GAAGF,IAAI,CAACG,KAAK,CAACN,cAAc,CAAC;IAC/C,OAAOK,YAAY;EACrB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;IAC3D,OAAO,CAAC;EACV;AACF,CAAC;AAED,OAAO,MAAME,eAAe,GAAG,MAAAA,CAAA,KAAY;EACzC,IAAIC,SAAS,CAACC,WAAW,EAAE;IACzB,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtCJ,SAAS,CAACC,WAAW,CAACI,kBAAkB,CACtC,MAAOC,QAAQ,IAAK;QAClB,MAAM;UAAEC,QAAQ;UAAEC;QAAU,CAAC,GAAGF,QAAQ,CAACG,MAAM;;QAE/C;QACA,IAAI;UACF,MAAMC,gBAAgB,GAAG,MAAMlB,KAAK,CAAC,iEAAiEe,QAAQ,QAAQC,SAAS,EAAE,CAAC;UAClI,MAAMG,YAAY,GAAG,MAAMD,gBAAgB,CAAChB,IAAI,CAAC,CAAC;UAClD,MAAMkB,OAAO,GAAGD,YAAY,CAACE,OAAO,CAACD,OAAO,IAAI,iBAAiB;UACjE,MAAME,gBAAgB,GAAG;YACvB,eAAe,EAAE,KAAK;YACtB,OAAO,EAAE,KAAK;YACd,QAAQ,EAAE,KAAK;YACf,OAAO,EAAE;YACT;UACF,CAAC;UAED,MAAMC,YAAY,GAAGD,gBAAgB,CAACF,OAAO,CAAC,IAAI,KAAK;UACvDT,OAAO,CAACY,YAAY,CAAC;QACvB,CAAC,CAAC,OAAOlB,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;UAChDM,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;QAClB;MACF,CAAC,EACAN,KAAK,IAAK;QACTC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;QACpBM,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;MAClB,CACF,CAAC;IACH,CAAC,CAAC;EACJ,CAAC,MAAM;IACL,OAAO,KAAK,CAAC,CAAC;EAChB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}