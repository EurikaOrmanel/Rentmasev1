{"ast":null,"code":"var _jsxFileName = \"/Users/dishapanchal/Documents/GitHub/Rentmasev1/src/components/LocationButton.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { ReactComponent as LocationIcon } from '../images/location.svg'; // Adjust the path as necessary\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Button = styled.button`\n  display: flex;\n  align-items: center;\n  border: 1px solid lightgrey;\n  background-color: white;\n  border-radius: 25px;\n  padding: 10px 10px;\n  margin-right: 30px; /* Add margin to separate it from the search bar */\n  cursor: pointer;\n  transition: border-color 0.3s ease, background-color 0.3s ease;\n  height: 40px; /* Set a fixed height to maintain button size */\n\n  &:hover {\n    background-color: #f0f0f0;\n    border-color: blue;\n  }\n\n  &:active {\n    border-color: blue;\n  }\n`;\n_c = Button;\nconst Icon = styled(LocationIcon)`\n  width: 24px;\n  height: 24px;\n  margin-right: 10px;\n  fill: #00B5E2; /* Fill color for the icon */\n`;\n_c2 = Icon;\nconst LocationText = styled.span`\n  font-size: 1rem;\n  color: black;\n  margin-right: 10px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  max-width: 150px; /* Ensure text doesn't make the button too wide */\n`;\n_c3 = LocationText;\nconst LocationButton = () => {\n  _s();\n  const [currentLocation, setCurrentLocation] = useState('Loading...');\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n        fetch(`https://nominatim.openstreetmap.org/reverse?format=jsonv2&lat=${latitude}&lon=${longitude}`).then(response => response.json()).then(data => {\n          const {\n            address\n          } = data;\n          const city = address.city || address.town || address.village || address.state_district || address.county || 'Unknown City';\n          const country = address.country || 'Unknown Country';\n          const location = `${city}, ${country}`;\n          setCurrentLocation(location);\n        }).catch(error => {\n          console.error(error);\n          setCurrentLocation('Unable to retrieve location');\n        });\n      }, error => {\n        console.error(error);\n        setCurrentLocation('Unable to retrieve location');\n      });\n    } else {\n      setCurrentLocation('Geolocation not supported');\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Button, {\n      children: [/*#__PURE__*/_jsxDEV(Icon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(LocationText, {\n        children: currentLocation\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(LocationButton, \"cIxUgxACK5Lg8pJnq5HR9QMGQLI=\");\n_c4 = LocationButton;\nexport default LocationButton;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"Button\");\n$RefreshReg$(_c2, \"Icon\");\n$RefreshReg$(_c3, \"LocationText\");\n$RefreshReg$(_c4, \"LocationButton\");","map":{"version":3,"names":["React","useState","useEffect","styled","ReactComponent","LocationIcon","jsxDEV","_jsxDEV","Fragment","_Fragment","Button","button","_c","Icon","_c2","LocationText","span","_c3","LocationButton","_s","currentLocation","setCurrentLocation","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","fetch","then","response","json","data","address","city","town","village","state_district","county","country","location","catch","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","_c4","$RefreshReg$"],"sources":["/Users/dishapanchal/Documents/GitHub/Rentmasev1/src/components/LocationButton.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { ReactComponent as LocationIcon } from '../images/location.svg'; // Adjust the path as necessary\n\nconst Button = styled.button`\n  display: flex;\n  align-items: center;\n  border: 1px solid lightgrey;\n  background-color: white;\n  border-radius: 25px;\n  padding: 10px 10px;\n  margin-right: 30px; /* Add margin to separate it from the search bar */\n  cursor: pointer;\n  transition: border-color 0.3s ease, background-color 0.3s ease;\n  height: 40px; /* Set a fixed height to maintain button size */\n\n  &:hover {\n    background-color: #f0f0f0;\n    border-color: blue;\n  }\n\n  &:active {\n    border-color: blue;\n  }\n`;\n\nconst Icon = styled(LocationIcon)`\n  width: 24px;\n  height: 24px;\n  margin-right: 10px;\n  fill: #00B5E2; /* Fill color for the icon */\n`;\n\nconst LocationText = styled.span`\n  font-size: 1rem;\n  color: black;\n  margin-right: 10px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  max-width: 150px; /* Ensure text doesn't make the button too wide */\n`;\n\nconst LocationButton = () => {\n  const [currentLocation, setCurrentLocation] = useState('Loading...');\n\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          const { latitude, longitude } = position.coords;\n          fetch(`https://nominatim.openstreetmap.org/reverse?format=jsonv2&lat=${latitude}&lon=${longitude}`)\n            .then((response) => response.json())\n            .then((data) => {\n              const { address } = data;\n              const city = address.city || address.town || address.village || address.state_district || address.county || 'Unknown City';\n              const country = address.country || 'Unknown Country';\n              const location = `${city}, ${country}`;\n\n              setCurrentLocation(location);\n            })\n            .catch((error) => {\n              console.error(error);\n              setCurrentLocation('Unable to retrieve location');\n            });\n        },\n        (error) => {\n          console.error(error);\n          setCurrentLocation('Unable to retrieve location');\n        }\n      );\n    } else {\n      setCurrentLocation('Geolocation not supported');\n    }\n  }, []);\n\n  return (\n    <>\n      <Button>\n        <Icon />\n        <LocationText>{currentLocation}</LocationText>\n      </Button>\n    </>\n  );\n};\n\nexport default LocationButton;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}