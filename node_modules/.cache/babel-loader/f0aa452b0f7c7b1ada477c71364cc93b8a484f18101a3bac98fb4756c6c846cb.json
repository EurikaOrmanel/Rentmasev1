{"ast":null,"code":"var _jsxFileName = \"/Users/dishapanchal/Documents/GitHub/Rentmasev1/src/hooks/useCart.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/hooks/useCart.js\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext();\nexport const useCart = () => {\n  _s();\n  return useContext(CartContext);\n};\n_s(useCart, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const CartProvider = ({\n  children\n}) => {\n  _s2();\n  const [cart, setCart] = useState([]);\n  const [currency, setCurrency] = useState('USD');\n  const [exchangeRate, setExchangeRate] = useState(1);\n  const [currencySymbol, setCurrencySymbol] = useState('$');\n  useEffect(() => {\n    const getCurrencySymbol = currencyCode => {\n      const currencySymbols = {\n        USD: '$',\n        EUR: '€',\n        GBP: '£',\n        INR: '₹',\n        JPY: '¥',\n        CAD: 'C$'\n        // Add more currency symbols as needed\n      };\n      return currencySymbols[currencyCode] || currencyCode;\n    };\n    const fetchCurrencyConversion = async (baseCurrency, targetCurrency) => {\n      try {\n        const response = await fetch(`https://api.exchangerate-api.com/v4/latest/${baseCurrency}`);\n        const data = await response.json();\n        const exchangeRate = data.rates[targetCurrency];\n        return exchangeRate;\n      } catch (error) {\n        console.error('Error fetching currency conversion:', error);\n        return 1;\n      }\n    };\n    const updateCurrency = async () => {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(async position => {\n          const {\n            latitude,\n            longitude\n          } = position.coords;\n\n          // Fetch user's country and currency\n          const locationResponse = await fetch(`https://nominatim.openstreetmap.org/reverse?format=jsonv2&lat=${latitude}&lon=${longitude}`);\n          const locationData = await locationResponse.json();\n          const country = locationData.address.country || 'Unknown Country';\n          const currencyMappings = {\n            \"United States\": \"USD\",\n            \"India\": \"INR\",\n            \"Canada\": \"CAD\",\n            \"Japan\": \"JPY\"\n            // Add more country to currency mappings as needed\n          };\n          const userCurrency = currencyMappings[country] || 'USD';\n          setCurrency(userCurrency);\n          setCurrencySymbol(getCurrencySymbol(userCurrency));\n\n          // Convert price if needed\n          if (userCurrency !== 'USD') {\n            const rate = await fetchCurrencyConversion('USD', userCurrency);\n            setExchangeRate(rate);\n          }\n        }, error => {\n          console.error(error);\n        });\n      }\n    };\n    updateCurrency();\n  }, []);\n  const addToCart = item => {\n    const itemIndex = cart.findIndex(cartItem => cartItem.id === item.id);\n    if (itemIndex > -1) {\n      const updatedCart = cart.map((cartItem, index) => index === itemIndex ? {\n        ...cartItem,\n        quantity: cartItem.quantity + 1\n      } : cartItem);\n      setCart(updatedCart);\n    } else {\n      setCart([...cart, {\n        ...item,\n        quantity: 1,\n        convertedPrice: (item.price * exchangeRate).toFixed(2),\n        currencySymbol\n      }]);\n    }\n  };\n  const removeFromCart = index => {\n    setCart(cart.filter((_, i) => i !== index));\n  };\n  const updateQuantity = (item, quantity) => {\n    if (quantity <= 0) return;\n    const updatedCart = cart.map(cartItem => cartItem.id === item.id ? {\n      ...cartItem,\n      quantity\n    } : cartItem);\n    setCart(updatedCart);\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cart,\n      addToCart,\n      removeFromCart,\n      updateQuantity\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n};\n_s2(CartProvider, \"leGumxLiz+QrbOHLmHqX3PQqXGw=\");\n_c = CartProvider;\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","CartContext","useCart","_s","CartProvider","children","_s2","cart","setCart","currency","setCurrency","exchangeRate","setExchangeRate","currencySymbol","setCurrencySymbol","getCurrencySymbol","currencyCode","currencySymbols","USD","EUR","GBP","INR","JPY","CAD","fetchCurrencyConversion","baseCurrency","targetCurrency","response","fetch","data","json","rates","error","console","updateCurrency","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","locationResponse","locationData","country","address","currencyMappings","userCurrency","rate","addToCart","item","itemIndex","findIndex","cartItem","id","updatedCart","map","index","quantity","convertedPrice","price","toFixed","removeFromCart","filter","_","i","updateQuantity","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/dishapanchal/Documents/GitHub/Rentmasev1/src/hooks/useCart.js"],"sourcesContent":["// src/hooks/useCart.js\nimport React, { createContext, useContext, useState, useEffect } from 'react';\n\nconst CartContext = createContext();\n\nexport const useCart = () => {\n  return useContext(CartContext);\n};\n\nexport const CartProvider = ({ children }) => {\n  const [cart, setCart] = useState([]);\n  const [currency, setCurrency] = useState('USD');\n  const [exchangeRate, setExchangeRate] = useState(1);\n  const [currencySymbol, setCurrencySymbol] = useState('$');\n\n  useEffect(() => {\n    const getCurrencySymbol = (currencyCode) => {\n      const currencySymbols = {\n        USD: '$',\n        EUR: '€',\n        GBP: '£',\n        INR: '₹',\n        JPY: '¥',\n        CAD: 'C$',\n        // Add more currency symbols as needed\n      };\n      return currencySymbols[currencyCode] || currencyCode;\n    };\n\n    const fetchCurrencyConversion = async (baseCurrency, targetCurrency) => {\n      try {\n        const response = await fetch(`https://api.exchangerate-api.com/v4/latest/${baseCurrency}`);\n        const data = await response.json();\n        const exchangeRate = data.rates[targetCurrency];\n        return exchangeRate;\n      } catch (error) {\n        console.error('Error fetching currency conversion:', error);\n        return 1;\n      }\n    };\n\n    const updateCurrency = async () => {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(\n          async (position) => {\n            const { latitude, longitude } = position.coords;\n\n            // Fetch user's country and currency\n            const locationResponse = await fetch(`https://nominatim.openstreetmap.org/reverse?format=jsonv2&lat=${latitude}&lon=${longitude}`);\n            const locationData = await locationResponse.json();\n            const country = locationData.address.country || 'Unknown Country';\n            const currencyMappings = {\n              \"United States\": \"USD\",\n              \"India\": \"INR\",\n              \"Canada\": \"CAD\",\n              \"Japan\": \"JPY\",\n              // Add more country to currency mappings as needed\n            };\n\n            const userCurrency = currencyMappings[country] || 'USD';\n            setCurrency(userCurrency);\n            setCurrencySymbol(getCurrencySymbol(userCurrency));\n\n            // Convert price if needed\n            if (userCurrency !== 'USD') {\n              const rate = await fetchCurrencyConversion('USD', userCurrency);\n              setExchangeRate(rate);\n            }\n          },\n          (error) => {\n            console.error(error);\n          }\n        );\n      }\n    };\n\n    updateCurrency();\n  }, []);\n\n  const addToCart = (item) => {\n    const itemIndex = cart.findIndex(cartItem => cartItem.id === item.id);\n    if (itemIndex > -1) {\n      const updatedCart = cart.map((cartItem, index) =>\n        index === itemIndex\n          ? { ...cartItem, quantity: cartItem.quantity + 1 }\n          : cartItem\n      );\n      setCart(updatedCart);\n    } else {\n      setCart([...cart, { ...item, quantity: 1, convertedPrice: (item.price * exchangeRate).toFixed(2), currencySymbol }]);\n    }\n  };\n\n  const removeFromCart = (index) => {\n    setCart(cart.filter((_, i) => i !== index));\n  };\n\n  const updateQuantity = (item, quantity) => {\n    if (quantity <= 0) return;\n    const updatedCart = cart.map(cartItem =>\n      cartItem.id === item.id\n        ? { ...cartItem, quantity }\n        : cartItem\n    );\n    setCart(updatedCart);\n  };\n\n  return (\n    <CartContext.Provider value={{ cart, addToCart, removeFromCart, updateQuantity }}>\n      {children}\n    </CartContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}